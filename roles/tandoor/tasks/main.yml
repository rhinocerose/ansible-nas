---

- name: Start Tandoor
  block:
    - name: Create tandoor directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
      with_items:
        - "{{ tandoor_config_directory }}"

    - name: Tandoor DB Docker Container
      community.docker.docker_container:
        name: postgres
        image: "postgres:{{ tandoor_db_container_version }}"
        pull: true
        volumes:
          - "{{ tandoor_config_directory }}/postgresql:/var/lib/postgresql/data"
        env:
          TZ: "{{ system.timezone }}"
        env:
          PUID: "{{ tandoor_user_id }}"
          PGID: "{{ tandoor_group_id }}"
        restart_policy: unless-stopped

    - name: Install tandoor Docker Container
      community.docker.docker_container:
        name: "{{ tandoor_container_name }}"
        image: "{{ tandoor_container_store }}/{{ tandoor_container_name }}:{{ tandoor_version }}"
        pull: true
        volumes:
          - "{{ tandoor_config_directory }}/staticfiles:/opt/recipes/staticfiles"
          - "{{ tandoor_config_directory }}/nginx_config:/opt/recipes/nginx/conf.d"
          - "{{ tandoor_config_directory }}/mediafiles:/opt/recipes/mediafiles"
        ports:
          - "{{ tandoor_port_http }}:80"
          - "{{ tandoor_port_https }}:443"
        env:
          TZ: "{{ system.timezone }}"
          PUID: "{{ tandoor_user_id | string }}"
          PGID: "{{ tandoor_user_id | string }}"
        restart_policy: unless-stopped
        memory: "{{ tandoor_memory }}"

    - name: Install tandoor NGINX Docker Container
      community.docker.docker_container:
        name: nginx
        image: "nginx:{{ tandoor_nginx_version }}"
        pull: true
        volumes:
          - "{{ tandoor_config_directory }}/nginx_config:/etc/nginx/conf.d:ro"
          - "{{ tandoor_config_directory }}/staticfiles:/static"
          - "{{ tandoor_config_directory }}/mediafiles:/media"
        env:
          - ./.env
        restart_policy: always
        labels:
          traefik.enable: "{{ tandoor_available_externally | string }}"
          traefik.http.routers.tandoor.rule: "Host(`{{ tandoor_hostname }}.{{ ansible_nas_domain }}`)"
          traefik.http.routers.tandoor.tls.certresolver: "letsencrypt"
          traefik.http.routers.tandoor.tls.domains[0].main: "{{ ansible_nas_domain }}"
          traefik.http.routers.tandoor.tls.domains[0].sans: "*.{{ ansible_nas_domain }}"
          traefik.http.services.tandoor.loadbalancer.server.port: "80"
  when: tandoor_enabled is true


- name: Stop Tandoor
  block:
    - name: Stop Tandoor
      community.docker.docker_container:
        name: "{{ tandoor_container_name }}"
        state: absent
  when: tandoor_enabled is false
